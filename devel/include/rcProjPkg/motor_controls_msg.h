// Generated by gencpp from file rcProjPkg/motor_controls_msg.msg
// DO NOT EDIT!


#ifndef RCPROJPKG_MESSAGE_MOTOR_CONTROLS_MSG_H
#define RCPROJPKG_MESSAGE_MOTOR_CONTROLS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rcProjPkg
{
template <class ContainerAllocator>
struct motor_controls_msg_
{
  typedef motor_controls_msg_<ContainerAllocator> Type;

  motor_controls_msg_()
    : mappedX(0.0)
    , mappedY(0.0)  {
    }
  motor_controls_msg_(const ContainerAllocator& _alloc)
    : mappedX(0.0)
    , mappedY(0.0)  {
  (void)_alloc;
    }



   typedef double _mappedX_type;
  _mappedX_type mappedX;

   typedef double _mappedY_type;
  _mappedY_type mappedY;





  typedef boost::shared_ptr< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> const> ConstPtr;

}; // struct motor_controls_msg_

typedef ::rcProjPkg::motor_controls_msg_<std::allocator<void> > motor_controls_msg;

typedef boost::shared_ptr< ::rcProjPkg::motor_controls_msg > motor_controls_msgPtr;
typedef boost::shared_ptr< ::rcProjPkg::motor_controls_msg const> motor_controls_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rcProjPkg::motor_controls_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rcProjPkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rcProjPkg': ['/home/maahir/rcProject_ws/src/rcProjPkg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "501e3fc00f088a8af5e28080c514dcc4";
  }

  static const char* value(const ::rcProjPkg::motor_controls_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x501e3fc00f088a8aULL;
  static const uint64_t static_value2 = 0xf5e28080c514dcc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rcProjPkg/motor_controls_msg";
  }

  static const char* value(const ::rcProjPkg::motor_controls_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 mappedX\n\
float64 mappedY\n\
";
  }

  static const char* value(const ::rcProjPkg::motor_controls_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mappedX);
      stream.next(m.mappedY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_controls_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rcProjPkg::motor_controls_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rcProjPkg::motor_controls_msg_<ContainerAllocator>& v)
  {
    s << indent << "mappedX: ";
    Printer<double>::stream(s, indent + "  ", v.mappedX);
    s << indent << "mappedY: ";
    Printer<double>::stream(s, indent + "  ", v.mappedY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCPROJPKG_MESSAGE_MOTOR_CONTROLS_MSG_H
